"""create_banks_and_accounts_tables

Revision ID: 2c627465540f
Revises: create_payable_categories_table
Create Date: 2025-08-02 23:55:26.162764

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2c627465540f'
down_revision = 'create_payable_categories_table'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_customers_id', table_name='customers')
    op.drop_table('customers')
    op.drop_table('invoices')
    op.drop_index('ix_accounts_payable_id', table_name='accounts_payable')
    op.drop_table('accounts_payable')
    op.drop_index('ix_stock_movements_id', table_name='stock_movements')
    op.drop_table('stock_movements')
    op.drop_index('ix_product_components_component_product_id', table_name='product_components')
    op.drop_index('ix_product_components_composite_product_id', table_name='product_components')
    op.drop_index('ix_product_components_id', table_name='product_components')
    op.drop_table('product_components')
    op.drop_index('ix_products_category_id', table_name='products')
    op.drop_index('ix_products_id', table_name='products')
    op.drop_index('ix_products_name', table_name='products')
    op.drop_index('ix_products_ncm', table_name='products')
    op.drop_index('ix_products_sku', table_name='products')
    op.drop_table('products')
    op.drop_table('payments')
    op.drop_index('ix_payable_categories_code', table_name='payable_categories')
    op.drop_index('ix_payable_categories_company_id', table_name='payable_categories')
    op.drop_index('ix_payable_categories_id', table_name='payable_categories')
    op.drop_index('ix_payable_categories_is_active', table_name='payable_categories')
    op.drop_index('ix_payable_categories_name', table_name='payable_categories')
    op.drop_index('ix_payable_categories_parent_id', table_name='payable_categories')
    op.drop_table('payable_categories')
    op.drop_index('ix_stock_branches_id', table_name='stock_branches')
    op.drop_table('stock_branches')
    op.drop_index('ix_categories_code', table_name='categories')
    op.drop_index('ix_categories_id', table_name='categories')
    op.drop_index('ix_categories_name', table_name='categories')
    op.drop_table('categories')
    op.drop_index('ix_product_skus_barcode', table_name='product_skus')
    op.drop_index('ix_product_skus_id', table_name='product_skus')
    op.drop_index('ix_product_skus_sku_code', table_name='product_skus')
    op.drop_table('product_skus')
    op.drop_index('ix_accounts_receivable_id', table_name='accounts_receivable')
    op.drop_table('accounts_receivable')
    op.drop_table('billing_settings')
    op.drop_table('invoice_items')
    op.alter_column('notas_fiscais', 'company_id',
               existing_type=sa.UUID(),
               type_=sa.Integer(),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('notas_fiscais', 'company_id',
               existing_type=sa.Integer(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.create_table('invoice_items',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('invoice_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('module_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('unit_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('total_price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name='invoice_items_invoice_id_fkey'),
    sa.ForeignKeyConstraint(['module_id'], ['modules.id'], name='invoice_items_module_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='invoice_items_pkey')
    )
    op.create_table('billing_settings',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('billing_day', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('grace_period_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('auto_suspend', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('default_payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('credit_card_last4', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('credit_card_brand', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('credit_card_expiry', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('send_invoice_emails', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('send_payment_reminders', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='billing_settings_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='billing_settings_pkey')
    )
    op.create_table('accounts_receivable',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('receivable_type', postgresql.ENUM('CASH', 'INSTALLMENT', name='receivabletype'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'PAID', 'OVERDUE', 'CANCELLED', name='receivablestatus'), autoincrement=False, nullable=True),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('paid_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('entry_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('installment_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_installments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('installment_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='accounts_receivable_category_id_fkey'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='accounts_receivable_company_id_fkey'),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='accounts_receivable_customer_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='accounts_receivable_pkey')
    )
    op.create_index('ix_accounts_receivable_id', 'accounts_receivable', ['id'], unique=False)
    op.create_table('product_skus',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('product_skus_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sku_code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('barcode', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('size', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('material', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('flavor', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('variant_description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('cost_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('sale_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('wholesale_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('promotional_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('current_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('minimum_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('maximum_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reserved_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('warehouse_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('shelf_location', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('taxes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('supplier_sku', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('supplier_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_available_for_sale', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_stock_sku', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('stock_sku_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='product_skus_product_id_fkey'),
    sa.ForeignKeyConstraint(['stock_sku_id'], ['product_skus.id'], name='product_skus_stock_sku_id_fkey'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], name='product_skus_supplier_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='product_skus_pkey'),
    sa.UniqueConstraint('sku_code', name='product_skus_sku_code_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_product_skus_sku_code', 'product_skus', ['sku_code'], unique=False)
    op.create_index('ix_product_skus_id', 'product_skus', ['id'], unique=False)
    op.create_index('ix_product_skus_barcode', 'product_skus', ['barcode'], unique=False)
    op.create_table('categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sort_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='categories_company_id_fkey'),
    sa.ForeignKeyConstraint(['parent_id'], ['categories.id'], name='categories_parent_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_categories_name', 'categories', ['name'], unique=False)
    op.create_index('ix_categories_id', 'categories', ['id'], unique=False)
    op.create_index('ix_categories_code', 'categories', ['code'], unique=False)
    op.create_table('stock_branches',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sku_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('branch_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('current_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('minimum_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('maximum_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reserved_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('warehouse_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('shelf_location', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['branch_id'], ['branches.id'], name='stock_branches_branch_id_fkey'),
    sa.ForeignKeyConstraint(['sku_id'], ['product_skus.id'], name='stock_branches_sku_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stock_branches_pkey')
    )
    op.create_index('ix_stock_branches_id', 'stock_branches', ['id'], unique=False)
    op.create_table('payable_categories',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('payable_categories_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('sort_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='payable_categories_company_id_fkey'),
    sa.ForeignKeyConstraint(['parent_id'], ['payable_categories.id'], name='payable_categories_parent_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payable_categories_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_payable_categories_parent_id', 'payable_categories', ['parent_id'], unique=False)
    op.create_index('ix_payable_categories_name', 'payable_categories', ['name'], unique=False)
    op.create_index('ix_payable_categories_is_active', 'payable_categories', ['is_active'], unique=False)
    op.create_index('ix_payable_categories_id', 'payable_categories', ['id'], unique=False)
    op.create_index('ix_payable_categories_company_id', 'payable_categories', ['company_id'], unique=False)
    op.create_index('ix_payable_categories_code', 'payable_categories', ['code'], unique=False)
    op.create_table('payments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('invoice_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name='payments_invoice_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payments_pkey')
    )
    op.create_table('products',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('products_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('brand', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('ncm', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ean', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('gtin', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('subcategory', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('length', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('width', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('height', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_service', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('shopee_category_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('shopee_category_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('shopee_attributes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('shopee_warranty', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('shopee_brand_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('shopee_model_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('shopee_is_pre_order', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('shopee_logistics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mercadolivre_category_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('mercadolivre_category_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('mercadolivre_attributes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mercadolivre_warranty', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('mercadolivre_brand_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('mercadolivre_model_id', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('mercadolivre_condition', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('mercadolivre_listing_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('mercadolivre_shipping', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('product_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sku', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('is_main_sku', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('cost_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sale_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('current_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('min_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reserved_stock', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('cest', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('cfop', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('icms_st', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('icms', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ipi', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pis', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cofins', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('iss', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('iof', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cide', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('csll', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('irrf', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('inss', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('fgts', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('outros_impostos', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], name='fk_products_category_id_categories'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='products_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_products_sku', 'products', ['sku'], unique=False)
    op.create_index('ix_products_ncm', 'products', ['ncm'], unique=False)
    op.create_index('ix_products_name', 'products', ['name'], unique=False)
    op.create_index('ix_products_id', 'products', ['id'], unique=False)
    op.create_index('ix_products_category_id', 'products', ['category_id'], unique=False)
    op.create_table('product_components',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('composite_product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('component_product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_required', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('assembly_order', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('additional_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['component_product_id'], ['products.id'], name='product_components_component_product_id_fkey'),
    sa.ForeignKeyConstraint(['composite_product_id'], ['products.id'], name='product_components_composite_product_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='product_components_pkey')
    )
    op.create_index('ix_product_components_id', 'product_components', ['id'], unique=False)
    op.create_index('ix_product_components_composite_product_id', 'product_components', ['composite_product_id'], unique=False)
    op.create_index('ix_product_components_component_product_id', 'product_components', ['component_product_id'], unique=False)
    op.create_table('stock_movements',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sku_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('movement_type', postgresql.ENUM('entry', 'exit', 'adjustment', 'transfer', 'reservation', 'return', name='movementtype'), autoincrement=False, nullable=False),
    sa.Column('movement_reason', postgresql.ENUM('purchase', 'sale', 'transfer_in', 'transfer_out', 'adjustment_positive', 'adjustment_negative', 'inventory', 'damaged', 'expired', 'loss', 'return_customer', 'return_supplier', name='movementreason'), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('previous_stock', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('current_stock', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reference_document', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('reference_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('from_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('to_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('unit_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_cost', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='stock_movements_company_id_fkey'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='stock_movements_product_id_fkey'),
    sa.ForeignKeyConstraint(['sku_id'], ['product_skus.id'], name='stock_movements_sku_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='stock_movements_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='stock_movements_pkey')
    )
    op.create_index('ix_stock_movements_id', 'stock_movements', ['id'], unique=False)
    op.create_table('accounts_payable',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('supplier_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('category_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('payable_type', postgresql.ENUM('CASH', 'INSTALLMENT', name='payabletype'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'PAID', 'OVERDUE', 'CANCELLED', name='payablestatus'), autoincrement=False, nullable=True),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('paid_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('entry_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('installment_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_installments', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('installment_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reference', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['payable_categories.id'], name='accounts_payable_category_id_fkey'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='accounts_payable_company_id_fkey'),
    sa.ForeignKeyConstraint(['supplier_id'], ['suppliers.id'], name='accounts_payable_supplier_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='accounts_payable_pkey')
    )
    op.create_index('ix_accounts_payable_id', 'accounts_payable', ['id'], unique=False)
    op.create_table('invoices',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('subscription_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('invoice_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('billing_period_start', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('billing_period_end', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('due_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('issue_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('subtotal', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('tax_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('discount_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('billing_address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('billing_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='invoices_company_id_fkey'),
    sa.ForeignKeyConstraint(['subscription_id'], ['company_subscriptions.id'], name='invoices_subscription_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='invoices_pkey'),
    sa.UniqueConstraint('invoice_number', name='invoices_invoice_number_key')
    )
    op.create_table('customers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('company_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('customer_type', postgresql.ENUM('INDIVIDUAL', 'COMPANY', name='customertype'), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'BLOCKED', name='customerstatus'), autoincrement=False, nullable=True),
    sa.Column('cpf', sa.VARCHAR(length=14), autoincrement=False, nullable=True),
    sa.Column('cnpj', sa.VARCHAR(length=18), autoincrement=False, nullable=True),
    sa.Column('rg', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('ie', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=2), autoincrement=False, nullable=True),
    sa.Column('zip_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('credit_limit', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('payment_terms', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('discount_percentage', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('contact_person', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('contact_phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contact_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], name='customers_company_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='customers_pkey')
    )
    op.create_index('ix_customers_id', 'customers', ['id'], unique=False)
    # ### end Alembic commands ###
