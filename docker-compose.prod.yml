version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      # Configuração principal do PostgreSQL
      POSTGRES_DB: ${POSTGRES_DB:-finwise_saas_db}
      POSTGRES_USER: ${POSTGRES_USER:-finwise_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-finwise_password}
      PGDATA: /var/lib/postgresql/data/pgdata
      
      # Configurações adicionais para garantir autenticação
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=trust"
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    restart: unless-stopped
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=on
      -c max_connections=200
      -c shared_buffers=256MB
      -c wal_level=replica
      -c max_wal_senders=3
      -c checkpoint_completion_target=0.7

  postgres-setup:
    image: postgres:15-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-finwise_password}
      POSTGRES_USER: ${POSTGRES_USER:-finwise_user}
      POSTGRES_DB: ${POSTGRES_DB:-finwise_saas_db}
    command: >
      sh -c "
        echo '🔧 Configurando PostgreSQL automaticamente...' &&
        sleep 5 &&
        echo '👤 Criando usuário e banco finwise...' &&
        PGPASSWORD=${POSTGRES_PASSWORD:-finwise_password} psql -h postgres -U postgres -c \"
          DO \$$\$$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '${POSTGRES_USER:-finwise_user}') THEN
              CREATE USER ${POSTGRES_USER:-finwise_user} WITH PASSWORD '${POSTGRES_PASSWORD:-finwise_password}';
              ALTER USER ${POSTGRES_USER:-finwise_user} CREATEDB;
              ALTER USER ${POSTGRES_USER:-finwise_user} WITH REPLICATION;
              RAISE NOTICE 'Usuário ${POSTGRES_USER:-finwise_user} criado';
            ELSE
              ALTER USER ${POSTGRES_USER:-finwise_user} WITH PASSWORD '${POSTGRES_PASSWORD:-finwise_password}';
              ALTER USER ${POSTGRES_USER:-finwise_user} CREATEDB;
              ALTER USER ${POSTGRES_USER:-finwise_user} WITH REPLICATION;
              RAISE NOTICE 'Usuário ${POSTGRES_USER:-finwise_user} atualizado';
            END IF;
          END
          \$$\$$;\" &&
        PGPASSWORD=${POSTGRES_PASSWORD:-finwise_password} psql -h postgres -U postgres -c \"
          SELECT 'CREATE DATABASE ${POSTGRES_DB:-finwise_saas_db} OWNER ${POSTGRES_USER:-finwise_user}'
          WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${POSTGRES_DB:-finwise_saas_db}');\" | grep CREATE | sh &&
        PGPASSWORD=${POSTGRES_PASSWORD:-finwise_password} psql -h postgres -U postgres -c \"
          ALTER DATABASE ${POSTGRES_DB:-finwise_saas_db} OWNER TO ${POSTGRES_USER:-finwise_user};
          GRANT ALL PRIVILEGES ON DATABASE ${POSTGRES_DB:-finwise_saas_db} TO ${POSTGRES_USER:-finwise_user};\" &&
        echo '🔐 Configurando permissões...' &&
        PGPASSWORD=${POSTGRES_PASSWORD:-finwise_password} psql -h postgres -U ${POSTGRES_USER:-finwise_user} -d ${POSTGRES_DB:-finwise_saas_db} -c \"
          GRANT ALL ON SCHEMA public TO ${POSTGRES_USER:-finwise_user};
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${POSTGRES_USER:-finwise_user};
          ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${POSTGRES_USER:-finwise_user};
          ALTER DATABASE ${POSTGRES_DB:-finwise_saas_db} SET timezone TO 'UTC';\" &&
        echo '✅ PostgreSQL configurado com sucesso!' &&
        echo '🧪 Testando conexão final...' &&
        PGPASSWORD=${POSTGRES_PASSWORD:-finwise_password} psql -h postgres -U ${POSTGRES_USER:-finwise_user} -d ${POSTGRES_DB:-finwise_saas_db} -c 'SELECT current_user, current_database();' &&
        echo '🎉 Configuração PostgreSQL COMPLETA!'
      "

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      # Database Configuration - Usando as mesmas variáveis do PostgreSQL
      DATABASE_URL: postgresql://${POSTGRES_USER:-finwise_user}:${POSTGRES_PASSWORD:-finwise_password}@postgres:5432/${POSTGRES_DB:-finwise_saas_db}
      POSTGRES_DB: ${POSTGRES_DB:-finwise_saas_db}
      POSTGRES_USER: ${POSTGRES_USER:-finwise_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-finwise_password}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # Application Configuration
      SECRET_KEY: ${SECRET_KEY:-finwise-super-secret-key-production-2024}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # CORS Configuration
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-https://desenvolvimento-finan.219u5p.easypanel.host,http://localhost:3000,http://localhost:8080}
      
      # Environment
      ENVIRONMENT: production
      DEBUG: "false"
    ports:
      - "8000:8000"
    depends_on:
      postgres-setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        echo '🚀 Iniciando configuração para produção...' &&
        echo '✅ PostgreSQL já foi configurado pelo postgres-setup!' &&
        echo '🔧 Executando script de inicialização...' &&
        python scripts/init_production.py &&
        echo '📝 Configurando Alembic...' &&
        alembic stamp head &&
        echo '🔄 Executando migrations pendentes...' &&
        alembic upgrade head || echo '⚠️  Migrations executadas ou falha não crítica' &&
        echo '🌐 Iniciando servidor FastAPI...' &&
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 1
      "

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_URL: ${VITE_API_URL:-https://desenvolvimento-finan.219u5p.easypanel.host:8000}
    ports:
      - "8080:8080"
    depends_on:
      - backend
    environment:
      VITE_API_URL: ${VITE_API_URL:-https://desenvolvimento-finan.219u5p.easypanel.host:8000}
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local