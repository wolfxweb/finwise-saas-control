# Docker Compose para FinanceMax SaaS - PRODUÇÃO

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: finwise_postgres
    environment:
      POSTGRES_DB: finwise_saas_db
      POSTGRES_USER: finwise_user
      POSTGRES_PASSWORD: finwise_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - finwise_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finwise_user -d finwise_saas_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: finwise_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - finwise_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: finwise_backend
    environment:
      DATABASE_URL: postgresql://finwise_user:finwise_password@postgres:5432/finwise_saas_db
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-for-saas-multiempresa}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-http://localhost:8080,http://localhost:3000,http://localhost:5173}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - finwise_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Aguardando banco de dados...' &&
        while ! pg_isready -h postgres -p 5432 -U finwise_user; do
          sleep 2
        done &&
        echo 'Executando migrations...' &&
        alembic upgrade head &&
        echo 'Iniciando aplicação...' &&
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "

  # Frontend React
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    container_name: finwise_frontend
    ports:
      - "8080:8080"
    depends_on:
      - backend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    networks:
      - finwise_network
    restart: unless-stopped

  # pgAdmin para gerenciar o banco de dados (opcional em produção)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: finwise_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@finwise.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - finwise_network
    restart: unless-stopped

  # Nginx para produção
  nginx:
    image: nginx:alpine
    container_name: finwise_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - finwise_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  finwise_network:
    driver: bridge 